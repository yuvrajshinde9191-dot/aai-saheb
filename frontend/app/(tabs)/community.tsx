import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  Modal,
  Dimensions,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import { FlashList } from '@shopify/flash-list';
import axios from 'axios';
import Constants from 'expo-constants';
import AsyncStorage from '@react-native-async-storage/async-storage';

const { width } = Dimensions.get('window');
const BACKEND_URL = Constants.expoConfig?.extra?.backendUrl || process.env.EXPO_PUBLIC_BACKEND_URL;

const communityGroups = [
  {
    id: 1,
    name: '‡§Æ‡§π‡§ø‡§≤‡§æ ‡§â‡§¶‡•ç‡§Ø‡•ã‡§ú‡§ï',
    nameEn: 'Women Entrepreneurs',
    members: 1250,
    icon: 'business',
    color: '#FF6B35',
    description: '‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§£‡§æ‡§±‡•ç‡§Ø‡§æ ‡§Æ‡§π‡§ø‡§≤‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä',
    category: 'business',
  },
  {
    id: 2,
    name: '‡§Æ‡§æ‡§§‡§æ ‡§∏‡§Æ‡•Ç‡§π',
    nameEn: 'Mothers Group',
    members: 2100,
    icon: 'heart',
    color: '#E91E63',
    description: '‡§Æ‡§æ‡§§‡§æ ‡§Ü‡§£‡§ø ‡§¨‡§æ‡§≤‡§™‡§£‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§≥‡§ú‡•Ä',
    category: 'family',
  },
  {
    id: 3,
    name: '‡§ï‡§∞‡§ø‡§Ö‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®',
    nameEn: 'Career Guidance',
    members: 980,
    icon: 'school',
    color: '#2196F3',
    description: '‡§ï‡§∞‡§ø‡§Ö‡§∞ ‡§Ü‡§£‡§ø ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£‡§æ‡§ö‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®',
    category: 'career',
  },
  {
    id: 4,
    name: '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§ó‡§∞‡•Ç‡§ï‡§§‡§æ',
    nameEn: 'Safety Awareness',
    members: 3200,
    icon: 'shield',
    color: '#4CAF50',
    description: '‡§Æ‡§π‡§ø‡§≤‡§æ‡§Ç‡§ö‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§Ü‡§£‡§ø ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞',
    category: 'safety',
  },
];

const availableTags = [
  '‡§ï‡§∞‡§ø‡§Ö‡§∞', '‡§Æ‡§æ‡§§‡•É‡§§‡•ç‡§µ', '‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø', '‡§∂‡§ø‡§ï‡•ç‡§∑‡§£', '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ', '‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø', '‡§ï‡§æ‡§Ø‡§¶‡§æ', '‡§§‡§Ç‡§§‡•ç‡§∞‡§ú‡•ç‡§û‡§æ‡§®'
];

export default function CommunityScreen() {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState<'posts' | 'groups'>('posts');
  const [showCreatePost, setShowCreatePost] = useState(false);
  const [newPost, setNewPost] = useState('');
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [isAnonymous, setIsAnonymous] = useState(false);
  const [userToken, setUserToken] = useState<string | null>(null);

  useEffect(() => {
    loadUserToken();
    fetchPosts();
  }, []);

  const loadUserToken = async () => {
    const token = await AsyncStorage.getItem('userToken');
    setUserToken(token);
  };

  const fetchPosts = async () => {
    try {
      setLoading(true);
      const token = await AsyncStorage.getItem('userToken');
      
      const response = await axios.get(`${BACKEND_URL}/api/community/posts`, {
        headers: token ? { Authorization: `Bearer ${token}` } : {},
      });

      if (response.data.success) {
        setPosts(response.data.posts || []);
      } else {
        // Set sample posts for demo
        setPosts([
          {
            id: '1',
            user_name: '‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
            content: '‡§Ü‡§ú ‡§Æ‡•Ä ‡§®‡§µ‡•Ä‡§® ‡§®‡•ã‡§ï‡§∞‡•Ä ‡§Æ‡§ø‡§≥‡§µ‡§≤‡•Ä ‡§Ü‡§π‡•á! ‡§ñ‡•Ç‡§™ ‡§Ü‡§®‡§Ç‡§¶ ‡§ù‡§æ‡§≤‡§æ. ‡§∏‡§∞‡•ç‡§µ ‡§¨‡§π‡§ø‡§£‡•Ä‡§Ç‡§®‡§æ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ ‡§ú‡•á ‡§Æ‡§≤‡§æ ‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ ‡§¶‡§ø‡§≤‡•Ä. üí™ #‡§ï‡§∞‡§ø‡§Ö‡§∞ #‡§Ø‡§∂',
            contentEn: 'I got a new job today! Very happy. Thanks to all sisters who inspired me.',
            created_at: '2025-01-25T10:30:00Z',
            likes_count: 45,
            comments_count: 12,
            is_anonymous: false,
            tags: ['‡§ï‡§∞‡§ø‡§Ö‡§∞', '‡§Ø‡§∂'],
            isLiked: false,
          },
          {
            id: '2',
            user_name: '‡§ó‡•Å‡§Æ‡§®‡§æ‡§Æ ‡§µ‡§æ‡§™‡§∞‡§ï‡§∞‡•ç‡§§‡§æ',
            content: '‡§Æ‡§æ‡§ù‡•ç‡§Ø‡§æ ‡§Æ‡•Å‡§≤‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£‡§æ‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§Ü‡§π‡•á. ‡§ï‡•ã‡§£‡•Ä ‡§ö‡§æ‡§Ç‡§ó‡§≤‡•ç‡§Ø‡§æ ‡§∂‡§æ‡§≥‡•á‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡§æ ‡§ï‡§æ? üôè #‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ #‡§Æ‡§¶‡§§',
            contentEn: 'Worried about my daughter\'s education. Can anyone suggest good schools?',
            created_at: '2025-01-25T08:15:00Z',
            likes_count: 28,
            comments_count: 35,
            is_anonymous: true,
            tags: ['‡§∂‡§ø‡§ï‡•ç‡§∑‡§£', '‡§Æ‡§¶‡§§'],
            isLiked: true,
          },
          {
            id: '3',
            user_name: '‡§Ö‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§∂‡§™‡§æ‡§Ç‡§°‡•á',
            content: '‡§Ü‡§ú ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§¶‡§ø‡§®‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡§æ‡§§ ‡§∏‡§π‡§≠‡§æ‡§ó‡•Ä ‡§ù‡§æ‡§≤‡•á. ‡§ñ‡•Ç‡§™ ‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ‡§¶‡§æ‡§Ø‡§ï ‡§µ‡§ï‡•ç‡§§‡§µ‡•ç‡§Ø‡•á ‡§ê‡§ï‡§≤‡•Ä. ‡§Ü‡§™‡§£ ‡§∏‡§∞‡•ç‡§µ ‡§Æ‡§ø‡§≥‡•Ç‡§® ‡§¨‡§¶‡§≤ ‡§ò‡§°‡§µ‡•Ç ‡§∂‡§ï‡§§‡•ã! ‚ú® #‡§Æ‡§π‡§ø‡§≤‡§æ‡§∂‡§ï‡•ç‡§§‡•Ä',
            contentEn: 'Participated in Women\'s Day program today. Heard very inspiring speeches.',
            created_at: '2025-01-24T16:45:00Z',
            likes_count: 67,
            comments_count: 23,
            is_anonymous: false,
            tags: ['‡§Æ‡§π‡§ø‡§≤‡§æ‡§∂‡§ï‡•ç‡§§‡•Ä'],
            isLiked: false,
          },
        ]);
      }
    } catch (error) {
      console.error('Error fetching posts:', error);
      setPosts([]);
    } finally {
      setLoading(false);
    }
  };

  const handleCreatePost = async () => {
    if (!newPost.trim()) {
      Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä / Error', '‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ã‡§∏‡•ç‡§ü ‡§≤‡§ø‡§π‡§æ / Please write your post');
      return;
    }

    if (!userToken) {
      Alert.alert(
        '‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï / Login Required',
        '‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§ï‡§∞‡§æ / Please login to create posts',
        [
          { text: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§æ / Cancel', style: 'cancel' },
          { text: '‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§ï‡§∞‡§æ / Login', onPress: () => router.push('/auth') },
        ]
      );
      return;
    }

    try {
      const response = await axios.post(
        `${BACKEND_URL}/api/community/posts`,
        {
          content: newPost.trim(),
          tags: selectedTags,
          is_anonymous: isAnonymous,
        },
        {
          headers: { Authorization: `Bearer ${userToken}` },
        }
      );

      if (response.data.success) {
        setShowCreatePost(false);
        setNewPost('');
        setSelectedTags([]);
        setIsAnonymous(false);
        fetchPosts();
        
        Alert.alert(
          '‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä / Success',
          '‡§™‡•ã‡§∏‡•ç‡§ü ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä‡§∞‡§ø‡§§‡•ç‡§Ø‡§æ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡•á‡§≤‡•Ä ‡§ó‡•á‡§≤‡•Ä / Post created successfully'
        );
      }
    } catch (error) {
      console.error('Error creating post:', error);
      Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä / Error', '‡§™‡•ã‡§∏‡•ç‡§ü ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä / Failed to create post');
    }
  };

  const handleLikePost = (postId: string) => {
    if (!userToken) {
      Alert.alert('‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï / Login Required', '‡§≤‡§æ‡§á‡§ï ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§ï‡§∞‡§æ / Please login to like posts');
      return;
    }

    // Update local state optimistically
    setPosts(prevPosts =>
      prevPosts.map(post =>
        post.id === postId
          ? { 
              ...post, 
              likes_count: post.isLiked ? post.likes_count - 1 : post.likes_count + 1, 
              isLiked: !post.isLiked 
            }
          : post
      )
    );
  };

  const handleJoinGroup = (groupId: number) => {
    const group = communityGroups.find(g => g.id === groupId);
    if (!group) return;

    if (!userToken) {
      Alert.alert(
        '‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï / Login Required',
        '‡§∏‡§Æ‡•Ç‡§π‡§æ‡§§ ‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§π‡•ã‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§ï‡§∞‡§æ / Please login to join groups',
        [
          { text: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§æ / Cancel', style: 'cancel' },
          { text: '‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§ï‡§∞‡§æ / Login', onPress: () => router.push('/auth') },
        ]
      );
      return;
    }

    Alert.alert(
      '‡§∏‡§Æ‡•Ç‡§π‡§æ‡§§ ‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§µ‡•ç‡§π‡§æ / Join Group',
      `‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ "${group.name}" ‡§Ø‡§æ ‡§∏‡§Æ‡•Ç‡§π‡§æ‡§§ ‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§µ‡•ç‡§π‡§æ‡§Ø‡§ö‡•á ‡§Ü‡§π‡•á ‡§ï‡§æ? / Do you want to join "${group.nameEn}" group?`,
      [
        { text: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§æ / Cancel', style: 'cancel' },
        { 
          text: '‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§µ‡•ç‡§π‡§æ / Join', 
          onPress: () => {
            Alert.alert(
              '‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä / Success', 
              `‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä "${group.name}" ‡§∏‡§Æ‡•Ç‡§π‡§æ‡§§ ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä‡§∞‡§ø‡§§‡•ç‡§Ø‡§æ ‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§ù‡§æ‡§≤‡§æ ‡§Ü‡§π‡§æ‡§§ / You have successfully joined "${group.nameEn}" group`
            );
          }
        },
      ]
    );
  };

  const getTimeAgo = (dateString: string) => {
    const now = new Date();
    const postDate = new Date(dateString);
    const diffInHours = Math.floor((now.getTime() - postDate.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return '‡§Ü‡§§‡•ç‡§§‡§æ‡§ö / Just now';
    if (diffInHours < 24) return `${diffInHours} ‡§§‡§æ‡§∏ ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä / ${diffInHours}h ago`;
    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays} ‡§¶‡§ø‡§µ‡§∏ ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä / ${diffInDays}d ago`;
  };

  const renderPost = ({ item }: { item: any }) => (
    <View style={styles.postCard}>
      <View style={styles.postHeader}>
        <View style={styles.userInfo}>
          <View style={[styles.avatar, item.is_anonymous && styles.anonymousAvatar]}>
            <Ionicons 
              name={item.is_anonymous ? "help" : "person"} 
              size={20} 
              color="#FFFFFF" 
            />
          </View>
          <View style={styles.userDetails}>
            <Text style={styles.userName}>
              {item.is_anonymous ? '‡§ó‡•Å‡§Æ‡§®‡§æ‡§Æ ‡§µ‡§æ‡§™‡§∞‡§ï‡§∞‡•ç‡§§‡§æ / Anonymous User' : item.user_name}
            </Text>
            <Text style={styles.postTime}>
              {getTimeAgo(item.created_at)}
            </Text>
          </View>
        </View>
        <TouchableOpacity style={styles.moreButton}>
          <Ionicons name="ellipsis-horizontal" size={20} color="#666" />
        </TouchableOpacity>
      </View>

      <Text style={styles.postContent}>{item.content}</Text>

      {item.tags && item.tags.length > 0 && (
        <View style={styles.tagsContainer}>
          {item.tags.map((tag: string, index: number) => (
            <View key={index} style={styles.tag}>
              <Text style={styles.tagText}>#{tag}</Text>
            </View>
          ))}
        </View>
      )}

      <View style={styles.postActions}>
        <TouchableOpacity
          style={[styles.actionButton, item.isLiked && styles.likedButton]}
          onPress={() => handleLikePost(item.id)}
        >
          <Ionicons
            name={item.isLiked ? "heart" : "heart-outline"}
            size={20}
            color={item.isLiked ? "#FF4444" : "#666"}
          />
          <Text style={[styles.actionText, item.isLiked && styles.likedText]}>
            {item.likes_count || 0}
          </Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.actionButton}>
          <Ionicons name="chatbubble-outline" size={20} color="#666" />
          <Text style={styles.actionText}>{item.comments_count || 0}</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.actionButton}>
          <Ionicons name="share-outline" size={20} color="#666" />
          <Text style={styles.actionText}>‡§∂‡•á‡§Ö‡§∞ / Share</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  const renderGroup = ({ item }: { item: any }) => (
    <TouchableOpacity style={styles.groupCard} onPress={() => handleJoinGroup(item.id)}>
      <View style={[styles.groupIcon, { backgroundColor: item.color }]}>
        <Ionicons name={item.icon} size={24} color="#FFFFFF" />
      </View>
      
      <View style={styles.groupInfo}>
        <Text style={styles.groupName}>{item.name}</Text>
        <Text style={styles.groupNameEn}>{item.nameEn}</Text>
        <Text style={styles.groupDescription}>{item.description}</Text>
        
        <View style={styles.groupStats}>
          <Ionicons name="people" size={14} color="#666" />
          <Text style={styles.groupMembers}>{item.members} ‡§∏‡§¶‡§∏‡•ç‡§Ø / members</Text>
        </View>
      </View>

      <TouchableOpacity
        style={styles.joinButton}
        onPress={() => handleJoinGroup(item.id)}
      >
        <Text style={styles.joinButtonText}>‡§∏‡§æ‡§Æ‡•Ä‡§≤ ‡§µ‡•ç‡§π‡§æ</Text>
      </TouchableOpacity>
    </TouchableOpacity>
  );

  const renderCreatePostModal = () => (
    <Modal
      visible={showCreatePost}
      animationType="slide" 
      presentationStyle="pageSheet"
    >
      <SafeAreaView style={styles.modalContainer}>
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.modalContainer}
        >
          <View style={styles.modalHeader}>
            <TouchableOpacity onPress={() => setShowCreatePost(false)}>
              <Ionicons name="close" size={24} color="#333" />
            </TouchableOpacity>
            <Text style={styles.modalTitle}>‡§®‡§µ‡•Ä‡§® ‡§™‡•ã‡§∏‡•ç‡§ü / New Post</Text>
            <TouchableOpacity style={styles.postButton} onPress={handleCreatePost}>
              <Text style={styles.postButtonText}>‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡§æ</Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            <TextInput
              style={styles.postInput}
              placeholder="‡§§‡•Å‡§Æ‡§ö‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§∂‡•á‡§Ö‡§∞ ‡§ï‡§∞‡§æ... / Share your thoughts..."
              placeholderTextColor="#999"
              multiline
              numberOfLines={6}
              value={newPost}
              onChangeText={setNewPost}
              textAlignVertical="top"
            />

            <View style={styles.anonymousContainer}>
              <TouchableOpacity
                style={styles.anonymousToggle}
                onPress={() => setIsAnonymous(!isAnonymous)}
              >
                <Ionicons
                  name={isAnonymous ? "checkbox" : "checkbox-outline"}
                  size={20}
                  color="#FF6B35"
                />
                <Text style={styles.anonymousText}>
                  ‡§ó‡•Å‡§Æ‡§®‡§æ‡§Æ‡§™‡§£‡•á ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡§æ / Post anonymously
                </Text>
              </TouchableOpacity>
            </View>

            <View style={styles.tagsSection}>
              <Text style={styles.tagsTitle}>‡§ü‡•Ö‡§ó ‡§ú‡•ã‡§°‡§æ / Add Tags</Text>
              <View style={styles.tagsGrid}>
                {availableTags.map((tag) => (
                  <TouchableOpacity
                    key={tag}
                    style={[
                      styles.tagOption,
                      selectedTags.includes(tag) && styles.selectedTagOption
                    ]}
                    onPress={() => {
                      setSelectedTags(prev =>
                        prev.includes(tag)
                          ? prev.filter(t => t !== tag)
                          : [...prev, tag]
                      );
                    }}
                  >
                    <Text style={[
                      styles.tagOptionText,
                      selectedTags.includes(tag) && styles.selectedTagText
                    ]}>
                      #{tag}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          </ScrollView>
        </KeyboardAvoidingView>
      </SafeAreaView>
    </Modal>
  );

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <LinearGradient colors={['#FF6B35', '#F7931E']} style={styles.header}>
        <Text style={styles.headerTitle}>‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø / Community</Text>
        <Text style={styles.headerSubtitle}>
          ‡§è‡§ï‡§§‡•ç‡§∞ ‡§Ø‡•á‡§ä, ‡§¨‡§≥‡§ï‡§ü ‡§π‡•ã‡§ä / Come together, grow stronger
        </Text>
      </LinearGradient>

      {/* Tab Navigation */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'posts' && styles.activeTab]}
          onPress={() => setActiveTab('posts')}
        >
          <Ionicons
            name="chatbubbles"
            size={20}
            color={activeTab === 'posts' ? '#FF6B35' : '#666'}
          />
          <Text style={[styles.tabText, activeTab === 'posts' && styles.activeTabText]}>
            ‡§™‡•ã‡§∏‡•ç‡§ü‡•ç‡§∏ / Posts
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'groups' && styles.activeTab]}
          onPress={() => setActiveTab('groups')}
        >
          <Ionicons
            name="people"
            size={20}
            color={activeTab === 'groups' ? '#FF6B35' : '#666'}
          />
          <Text style={[styles.tabText, activeTab === 'groups' && styles.activeTabText]}>
            ‡§∏‡§Æ‡•Ç‡§π / Groups
          </Text>
        </TouchableOpacity>
      </View>

      {/* Content */}
      <View style={styles.content}>
        {activeTab === 'posts' ? (
          <>
            {/* Create Post Button */}
            <TouchableOpacity
              style={styles.createPostButton}
              onPress={() => setShowCreatePost(true)}
            >
              <Ionicons name="add-circle" size={24} color="#FF6B35" />
              <Text style={styles.createPostText}>
                ‡§§‡•Å‡§Æ‡§ö‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§∂‡•á‡§Ö‡§∞ ‡§ï‡§∞‡§æ... / Share your thoughts...
              </Text>
            </TouchableOpacity>

            {/* Posts List */}
            <View style={styles.listContainer}>
              <FlashList
                data={posts}
                renderItem={renderPost}
                keyExtractor={(item) => item.id}
                estimatedItemSize={200}
                showsVerticalScrollIndicator={false}
                ListEmptyComponent={
                  <View style={styles.emptyContainer}>
                    <Ionicons name="chatbubbles-outline" size={64} color="#E0E0E0" />
                    <Text style={styles.emptyText}>‡§Ö‡§ú‡•Ç‡§® ‡§ï‡•ã‡§£‡§§‡•á‡§π‡•Ä ‡§™‡•ã‡§∏‡•ç‡§ü‡•ç‡§∏ ‡§®‡§æ‡§π‡•Ä‡§§ / No posts yet</Text>
                  </View>
                }
              />
            </View>
          </>
        ) : (
          /* Groups List */
          <View style={styles.listContainer}>
            <FlashList
              data={communityGroups}
              renderItem={renderGroup}
              keyExtractor={(item) => item.id.toString()}
              estimatedItemSize={120}
              showsVerticalScrollIndicator={false}
              ListHeaderComponent={
                <Text style={styles.groupsHeader}>
                  ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§∏‡§Æ‡•Ç‡§π / Community Groups
                </Text>
              }
            />
          </View>
        )}
      </View>

      {renderCreatePostModal()}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    paddingHorizontal: 20,
    paddingVertical: 24,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 16,
    color: 'rgba(255, 255, 255, 0.9)',
    textAlign: 'center',
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    marginHorizontal: 20,
    marginTop: 16,
    borderRadius: 12,
    padding: 4,
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 8,
  },
  activeTab: {
    backgroundColor: '#FFF3F0',
  },
  tabText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#666',
    marginLeft: 8,
  },
  activeTabText: {
    color: '#FF6B35',
    fontWeight: '600',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 16,
  },
  createPostButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  createPostText: {
    fontSize: 16,
    color: '#999',
    marginLeft: 12,
    flex: 1,
  },
  listContainer: {
    flex: 1,
  },
  postCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  postHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  avatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#FF6B35',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  anonymousAvatar: {
    backgroundColor: '#666',
  },
  userDetails: {},
  userName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  postTime: {
    fontSize: 12,
    color: '#999',
    marginTop: 2,
  },
  moreButton: {
    padding: 8,
  },
  postContent: {
    fontSize: 16,
    color: '#333',
    lineHeight: 22,
    marginBottom: 12,
  },
  tagsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 16,
  },
  tag: {
    backgroundColor: '#FFF3F0',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    marginRight: 8,
    marginBottom: 4,
  },
  tagText: {
    fontSize: 12,
    color: '#FF6B35',
    fontWeight: '500',
  },
  postActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 24,
    paddingVertical: 4,
  },
  likedButton: {
    // No additional styles needed, handled by icon color
  },
  actionText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 6,
  },
  likedText: {
    color: '#FF4444',
  },
  groupsHeader: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 16,
    marginTop: 16,
  },
  groupCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  groupIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  groupInfo: {
    flex: 1,
  },
  groupName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 2,
  },
  groupNameEn: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  groupDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  groupStats: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  groupMembers: {
    fontSize: 12,
    color: '#666',
    marginLeft: 4,
  },
  joinButton: {
    backgroundColor: '#FF6B35',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  joinButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  emptyContainer: {
    alignItems: 'center',
    paddingVertical: 64,
  },
  emptyText: {
    fontSize: 16,
    color: '#999',
    textAlign: 'center',
    marginTop: 16,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  postButton: {
    backgroundColor: '#FF6B35',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  postButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  postInput: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    color: '#333',
    textAlignVertical: 'top',
    minHeight: 120,
    marginBottom: 20,
  },
  anonymousContainer: {
    marginBottom: 20,
  },
  anonymousToggle: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  anonymousText: {
    fontSize: 16,
    color: '#333',
    marginLeft: 8,
  },
  tagsSection: {
    marginBottom: 20,
  },
  tagsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  tagsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  tagOption: {
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    marginRight: 8,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  selectedTagOption: {
    backgroundColor: '#FF6B35',
    borderColor: '#FF6B35',
  },
  tagOptionText: {
    fontSize: 14,
    color: '#666',
  },
  selectedTagText: {
    color: '#FFFFFF',
  },
});